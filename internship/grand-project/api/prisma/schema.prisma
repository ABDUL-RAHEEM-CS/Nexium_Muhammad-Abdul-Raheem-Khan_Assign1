// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  emailVerified     Boolean  @default(false)
  name              String?
  avatar            String?
  timezone          String   @default("UTC")
  language          String   @default("en")
  isActive          Boolean  @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Profile and preferences
  profile           UserProfile?
  settings          UserSettings?
  
  // Mental health data
  moodEntries       MoodEntry[]
  journalEntries    JournalEntry[]
  activities        Activity[]
  goals             Goal[]
  achievements      Achievement[]
  insights          Insight[]
  
  // Crisis and support
  crisisContacts    CrisisContact[]
  emergencyPlans    EmergencyPlan[]
  supportRequests   SupportRequest[]
  
  // Analytics and tracking
  sessions          UserSession[]
  analytics         UserAnalytics[]
  
  // Notifications and reminders
  notifications     Notification[]
  reminders         Reminder[]
  
  @@map("users")
}

model UserProfile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  dateOfBirth       DateTime?
  gender            Gender?
  occupation        String?
  location          String?
  emergencyContact  String?
  
  // Mental health background
  hasTherapist      Boolean  @default(false)
  therapistContact  String?
  medications       String[]
  conditions        String[]
  triggers          String[]
  copingStrategies  String[]
  
  // Privacy settings
  dataSharing       Boolean  @default(false)
  anonymousMode     Boolean  @default(false)
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@map("user_profiles")
}

model UserSettings {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Notification preferences
  emailNotifications  Boolean  @default(true)
  pushNotifications   Boolean  @default(true)
  reminderFrequency   ReminderFrequency @default(DAILY)
  quietHoursStart     String?  // Format: "22:00"
  quietHoursEnd       String?  // Format: "08:00"
  
  // Tracking preferences
  moodTrackingEnabled Boolean  @default(true)
  dailyCheckIns       Boolean  @default(true)
  weeklyReports       Boolean  @default(true)
  dataRetentionDays   Int      @default(365)
  
  // AI and insights
  aiInsightsEnabled   Boolean  @default(true)
  personalizedTips    Boolean  @default(true)
  trendAnalysis       Boolean  @default(true)
  
  // Crisis features
  crisisMode          Boolean  @default(false)
  emergencyContacts   Boolean  @default(true)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  @@map("user_settings")
}

model MoodEntry {
  id              String     @id @default(cuid())
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Core mood data
  moodScore       Int        // 1-10 scale
  moodType        MoodType
  energy          Int        // 1-10 scale
  anxiety         Int        // 1-10 scale
  stress          Int        // 1-10 scale
  sleep           Int        // 1-10 scale (hours slept)
  
  // Context and factors
  weather         String?
  activities      String[]
  location        String?
  socialContext   String?    // alone, with_friends, with_family, work
  physicalHealth  Int?       // 1-10 scale
  
  // Free text
  notes           String?
  tags            String[]
  
  // AI analysis
  sentiment       Float?     // -1 to 1
  emotions        Json?      // AI-detected emotions
  triggers        String[]   // AI-identified triggers
  patterns        Json?      // AI-detected patterns
  
  // Metadata
  entryMethod     EntryMethod @default(MANUAL)
  confidence      Float?     // AI confidence in analysis
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  @@map("mood_entries")
  @@index([userId, createdAt])
}

model JournalEntry {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String?
  content         String
  mood            MoodType?
  tags            String[]
  isPrivate       Boolean  @default(true)
  
  // AI analysis
  sentiment       Float?   // -1 to 1
  emotions        Json?    // AI-detected emotions
  themes          String[] // AI-identified themes
  insights        String[] // AI-generated insights
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("journal_entries")
  @@index([userId, createdAt])
}

model Activity {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name            String
  category        ActivityCategory
  duration        Int?           // in minutes
  intensity       ActivityIntensity?
  enjoyment       Int?           // 1-10 scale
  moodImpact      Int?           // -5 to +5 scale
  
  notes           String?
  location        String?
  withOthers      Boolean        @default(false)
  
  startedAt       DateTime
  completedAt     DateTime?
  createdAt       DateTime       @default(now())
  
  @@map("activities")
  @@index([userId, startedAt])
}

model Goal {
  id              String     @id @default(cuid())
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?
  category        GoalCategory
  priority        Priority   @default(MEDIUM)
  
  // Goal metrics
  targetValue     Float?
  currentValue    Float      @default(0)
  unit            String?    // "days", "times", "hours", etc.
  
  // Timeline
  startDate       DateTime   @default(now())
  targetDate      DateTime?
  completedAt     DateTime?
  
  // Status and progress
  status          GoalStatus @default(ACTIVE)
  progress        Float      @default(0) // 0-100 percentage
  
  // Tracking
  milestones      Json?      // Array of milestone objects
  reminders       Reminder[]
  
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  @@map("goals")
  @@index([userId, status])
}

model Achievement {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type            AchievementType
  title           String
  description     String
  category        String
  points          Int              @default(0)
  badge           String?          // Badge icon/image
  
  // Achievement criteria
  criteria        Json             // Flexible criteria object
  progress        Float            @default(0)
  isUnlocked      Boolean          @default(false)
  
  unlockedAt      DateTime?
  createdAt       DateTime         @default(now())
  
  @@map("achievements")
  @@index([userId, isUnlocked])
}

model Insight {
  id              String       @id @default(cuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type            InsightType
  title           String
  description     String
  
  // Data and analysis
  dataPoints      Json         // Relevant data points
  confidence      Float        // AI confidence 0-1
  actionable      Boolean      @default(true)
  
  // Recommendations
  recommendations String[]
  relatedPatterns String[]
  
  // User interaction
  isRead          Boolean      @default(false)
  isUseful        Boolean?     // User feedback
  
  validUntil      DateTime?    // Expiry for time-sensitive insights
  createdAt       DateTime     @default(now())
  
  @@map("insights")
  @@index([userId, type, createdAt])
}

model CrisisContact {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name            String
  relationship    String   // "therapist", "friend", "family", "hotline"
  phone           String
  email           String?
  notes           String?
  
  isPrimary       Boolean  @default(false)
  isEmergency     Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("crisis_contacts")
  @@index([userId, isPrimary])
}

model EmergencyPlan {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title           String
  description     String
  
  // Plan steps
  warningSigns   String[] // Early warning signs
  copingStrategies String[] // Immediate coping strategies
  contactSteps    String[] // Who to contact and when
  safetyPlan      String[] // Safety measures
  
  // Crisis levels
  triggerLevel    CrisisLevel @default(MODERATE)
  
  isActive        Boolean  @default(true)
  lastUsed        DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("emergency_plans")
  @@index([userId, isActive])
}

model SupportRequest {
  id              String          @id @default(cuid())
  userId          String
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type            SupportType
  priority        Priority        @default(MEDIUM)
  subject         String
  description     String
  
  status          SupportStatus   @default(OPEN)
  assignedTo      String?         // Support team member
  
  // Resolution
  resolution      String?
  resolvedAt      DateTime?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@map("support_requests")
  @@index([userId, status])
}

model UserSession {
  id              String   @id @default(cuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sessionId       String   @unique
  device          String?
  browser         String?
  ipAddress       String?
  location        String?
  
  startedAt       DateTime @default(now())
  endedAt         DateTime?
  duration        Int?     // in seconds
  
  // Activity tracking
  pagesViewed     String[]
  actionsPerformed Json?   // Array of action objects
  
  @@map("user_sessions")
  @@index([userId, startedAt])
}

model UserAnalytics {
  id              String       @id @default(cuid())
  userId          String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  date            DateTime     @db.Date
  
  // Mood analytics
  avgMoodScore    Float?
  moodVariance    Float?
  dominantMood    MoodType?
  
  // Activity analytics
  totalActivities Int          @default(0)
  activeMinutes   Int          @default(0)
  sleepHours      Float?
  
  // Engagement analytics
  appUsageMinutes Int          @default(0)
  entriesCreated  Int          @default(0)
  goalsProgress   Float?       // Average progress across active goals
  
  // Calculated metrics
  wellnessScore   Float?       // 0-100 composite score
  stressLevel     Float?       // 0-10 calculated stress
  
  createdAt       DateTime     @default(now())
  
  @@map("user_analytics")
  @@unique([userId, date])
  @@index([userId, date])
}

model Notification {
  id              String             @id @default(cuid())
  userId          String
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type            NotificationType
  title           String
  message         String
  data            Json?              // Additional notification data
  
  // Delivery
  isRead          Boolean            @default(false)
  readAt          DateTime?
  
  // Scheduling
  scheduledFor    DateTime?
  deliveredAt     DateTime?
  
  createdAt       DateTime           @default(now())
  
  @@map("notifications")
  @@index([userId, isRead, createdAt])
}

model Reminder {
  id              String           @id @default(cuid())
  userId          String
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  goalId          String?
  goal            Goal?            @relation(fields: [goalId], references: [id], onDelete: Cascade)
  
  title           String
  message         String?
  type            ReminderType
  
  // Scheduling
  frequency       ReminderFrequency
  time            String           // Format: "14:30"
  daysOfWeek      Int[]            // 0-6 (Sunday-Saturday)
  
  // Status
  isActive        Boolean          @default(true)
  lastTriggered   DateTime?
  nextTrigger     DateTime?
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@map("reminders")
  @@index([userId, isActive, nextTrigger])
}

// Enums
enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
  OTHER
}

enum ReminderFrequency {
  NEVER
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum MoodType {
  TERRIBLE
  BAD
  OKAY
  GOOD
  GREAT
  EXCITED
  CALM
  ANXIOUS
  SAD
  ANGRY
  CONFUSED
  GRATEFUL
  HOPEFUL
}

enum EntryMethod {
  MANUAL
  VOICE
  AI_DETECTED
  IMPORTED
}

enum ActivityCategory {
  EXERCISE
  SOCIAL
  WORK
  HOBBY
  SELF_CARE
  MEDITATION
  LEARNING
  ENTERTAINMENT
  OUTDOOR
  CREATIVE
  THERAPY
  OTHER
}

enum ActivityIntensity {
  LOW
  MODERATE
  HIGH
  INTENSE
}

enum GoalCategory {
  MOOD
  ACTIVITY
  HEALTH
  SOCIAL
  WORK
  PERSONAL
  WELLNESS
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum GoalStatus {
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum AchievementType {
  MILESTONE
  STREAK
  IMPROVEMENT
  CONSISTENCY
  EXPLORATION
  SOCIAL
  WELLNESS
}

enum InsightType {
  MOOD_PATTERN
  ACTIVITY_CORRELATION
  SLEEP_IMPACT
  STRESS_TRIGGER
  IMPROVEMENT_SUGGESTION
  WARNING_SIGN
  POSITIVE_TREND
  GOAL_PROGRESS
}

enum CrisisLevel {
  LOW
  MODERATE
  HIGH
  SEVERE
  EMERGENCY
}

enum SupportType {
  TECHNICAL
  EMOTIONAL
  CRISIS
  FEEDBACK
  GENERAL
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum NotificationType {
  REMINDER
  ACHIEVEMENT
  INSIGHT
  CRISIS_ALERT
  GOAL_UPDATE
  SYSTEM
  SOCIAL
}

enum ReminderType {
  MOOD_CHECK
  ACTIVITY
  GOAL
  MEDICATION
  THERAPY
  SELF_CARE
  CUSTOM
} 